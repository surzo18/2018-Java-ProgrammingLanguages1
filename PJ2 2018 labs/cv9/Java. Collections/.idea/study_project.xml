<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="course">
        <RemoteCourse>
          <option name="adaptive" value="false" />
          <option name="additionalMaterialsUpdateDate" value="0" />
          <option name="authors">
            <list>
              <StepicUser>
                <option name="accessToken" value="" />
                <option name="firstName" value="JetBrains" />
                <option name="guest" value="false" />
                <option name="id" value="17813950" />
                <option name="lastName" value="" />
                <option name="refreshToken" value="" />
              </StepicUser>
            </list>
          </option>
          <option name="compatible" value="false" />
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="This is an introductory course to Java. Join the course for a basic introduction into the language, to learn about collections, and to practice using them in Java programs. &#10;&#10;For those of you who are just starting out on your learning journey, we recommend you do the “Java. Introduction” course first." />
          <option name="fromZip" value="false" />
          <option name="id" value="6860" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="17813950" />
            </list>
          </option>
          <option name="language" value="JAVA" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="Java. Collections" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="13470" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm JAVA" />
          <option name="updateDate" value="1522347223000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77928" />
                <option name="index" value="1" />
                <option name="name" value="List" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521291154000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Collections are containers for grouping elements into a single unit. They are used to store, retrieve, manipulate and communicate aggregate data. Most programming languages have commonly-used collections in standard libraries.&lt;/p&gt;&lt;p&gt;First, let's consider commonly-used collections in computer science and applications regardless of the programming language.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;List&lt;/span&gt;&lt;/b&gt; is an ordered collection, its elements can be accessed by indexes like an array.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&#10;  &#10; &#10; &lt;p&gt;&#10;  &#10;  &lt;/p&gt;&lt;p&gt;&lt;img width=&quot;238&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/5402a846-c311-456b-9a60-2e91114d0e0e/&quot; height=&quot;65&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;Set&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt; is a collection that stores a set of unique values, like a mathematical set.&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img width=&quot;95&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/5f9fed87-caf1-4c84-a43f-cfc4f85b8512/&quot; height=&quot;72&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;Queue&lt;/span&gt;&lt;/b&gt; is a collection &lt;span class=&quot;wysiwyg-color-black&quot;&gt;that implements the principle &quot;FIFO&quot; (first in, first out).&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img width=&quot;131&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/c3f144b1-e6e7-41a8-874c-aab948e44a1f/&quot; height=&quot;61&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;Stack&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;  is c&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;ollection that implements the principle &quot;LIFO&quot; (last in, first out)&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img width=&quot;67&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/dc8eda3d-400b-48ff-a834-002f1a5b679f/&quot; height=&quot;129&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Deque&lt;/b&gt; &lt;b&gt;(double-ended queue)&lt;/b&gt; is a collection that implements both principles &quot;FIFO&quot; and &quot;LIFO&quot; together.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img width=&quot;177&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/39b07671-0ca7-4fa5-a214-f2239d7a6879/&quot; height=&quot;82&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Map (dictionary) &lt;/b&gt;is a&lt;b&gt; &lt;/b&gt;collection that store key-value pair&lt;/li&gt;&lt;/ul&gt;&#10;  &#10; &#10;&lt;/div&gt;&#10;&#10;&lt;img width=&quot;147&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/cc075b38-978c-454a-a6d9-d5515c5893ba/&quot; height=&quot;149&quot;&gt;&lt;p&gt;&lt;br&gt;There are also other types of collections, for instance, &lt;b&gt;priority queue, multiset&lt;/b&gt;, and others. In a priority queue, an element with high priority is served before an element with low priority. Multiset is a generalization of sets, it can store duplicate elements.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;The Collections Framework&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Java provides the Collections Framework - a set of classes and interfaces to implement commonly reusable data structures. The framework belongs to the &lt;b&gt;&lt;/b&gt;package&lt;b&gt; java.util&lt;/b&gt;.&lt;br&gt;&lt;/p&gt;&lt;p&gt;In Java, collections have some important features:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the size of a collection can be changed dynamically;&lt;/li&gt;&lt;li&gt;the modern collections are generic types and they can't store primitive types (we will consider only generic collections).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are two root interfaces: &lt;b&gt;java.util.Collection&amp;lt;E&amp;gt;&lt;/b&gt; and &lt;b&gt;java.util.Map&amp;lt;K, V&amp;gt;&lt;/b&gt;. Both interfaces are generics.&lt;/p&gt;&lt;p&gt;The picture below shows the main interfaces in the framework.&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/1c437e1a-73fc-42c0-8011-9a522e54e24c/&quot;&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;b&gt;Commonly used interfaces in the Collections Framework&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;As you can see there are two root interfaces: &lt;b&gt;Collection&lt;/b&gt; and &lt;b&gt;Map&lt;/b&gt;. They do not extend each other. &lt;b&gt;List, Set, Queue, Deque, SortedSet, Sorted&lt;/b&gt; are also interfaces. They are implemented by concrete classes for collections.&lt;/p&gt;&lt;p&gt;Note, there is no &lt;b&gt;Stack&lt;/b&gt; interface. It's recommended to use the &lt;b&gt;Deque&lt;/b&gt; interface for stacks. It represents a double-ended queue - a collection that generalizes a queue, for which elements can be added to or removed from either the front (head) or back (tail). Deque supports the FIFO and LIFO principles together. &lt;b&gt;Queues&lt;/b&gt; and &lt;b&gt;stacks&lt;/b&gt; can be considered specializations of deques.&lt;/p&gt;&lt;h2&gt;The Collection interface&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;The interface &lt;b&gt;Collection&amp;lt;E&amp;gt;&lt;/b&gt; is a generic type. It's the base interface for all lists, queues and sets. You can store elements of the specified type E in these collections.&lt;br&gt;&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are common methods for collections inherited from the interface Collection:&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;int&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-red&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/b&gt; returns the number of elements in this collection&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;isEmpty&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns &lt;b&gt;true&lt;/b&gt; if this collection contains no elements&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;contains&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object o)&lt;/span&gt; returns &lt;b&gt;true&lt;/b&gt; if this collection contains the specified element&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean &lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;add&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E e)&lt;/span&gt;&lt;/span&gt; ensures that this collection contains the specified element&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;remove&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object o)&lt;/span&gt;  removes a single instance of the specified element&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;void &lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;clear&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; removes all elements from this collection&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note, methods &lt;b&gt;remove&lt;/b&gt; and &lt;b&gt;contain&lt;/b&gt; uses the method &lt;b&gt;equals&lt;/b&gt; of the elements.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The interfaces &lt;b&gt;List&amp;lt;E&amp;gt;&lt;/b&gt;, &lt;b&gt;Set&amp;lt;E&amp;gt;&lt;/b&gt; and &lt;b&gt;Queue&amp;lt;E&amp;gt;&lt;/b&gt; inherit all methods of the &lt;b&gt;Collection&amp;lt;E&amp;gt;&lt;/b&gt; interface.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;The Map interface&lt;/h2&gt;&lt;div&gt;The interface &lt;b&gt;Map&amp;lt;K, V&amp;gt;&lt;/b&gt; is also a generic type. It stores key-values pairs. K is the type of &lt;span class=&quot;wysiwyg-color-red&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;keys&lt;/span&gt; &lt;/span&gt;and V is the type of stored &lt;span class=&quot;wysiwyg-color-black&quot;&gt;values. &lt;/span&gt;This interface is not a subtype of the Collection interface, but maps are often considered as collections.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A map cannot contain duplicate keys; each key can map to at most one value (even, a collection of values).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are common methods for collections inherited from the Map interface:&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;int&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;size&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the number of elements in this collection&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;isEmpty&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; Returns &lt;b&gt;true&lt;/b&gt; if this collection contains no elements&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;containsKey&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object key)&lt;/span&gt;   Returns &lt;b&gt;true&lt;/b&gt; if this collection contains the specified key&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;containsValue&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object value)&lt;/span&gt; Returns &lt;b&gt;true&lt;/b&gt; if this collection contains the specified value&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;get&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object key)&lt;/span&gt; returns the value to which the specified key is mapped, or &lt;b&gt;null&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;put&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(K key, V value) &lt;/span&gt; associates the specified value with the specified key (&lt;b&gt;optional&lt;/b&gt;)&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;remove&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object key)&lt;/span&gt; removes the mapping for a key from this map (&lt;b&gt;optional&lt;/b&gt;) &lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;void&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;clear&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; removes all elements from this collection &lt;b&gt;(optional)&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Set&amp;lt;K&lt;/span&gt;&amp;gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;keySet&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; Returns a Set view of the keys contained in this map&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collection&amp;lt;V&amp;gt;&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;values&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;() &lt;/span&gt;returns a Collection view of the values contained in this map&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Set&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;entrySet&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns a Set view of the mappings contained in this map&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As you can see, several methods of the &lt;b&gt;Map &lt;/b&gt;interface returns other collections.&lt;/p&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294410" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286155000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Queue" />
                          <option value="AbstractCollection" />
                          <option value="Set" />
                          <option value="Collection" />
                          <option value="Map" />
                          <option value="List" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="What are root interfaces of the Collections Framework?" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list>
                          <option value="4" />
                          <option value="3" />
                        </list>
                      </option>
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294428" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;What are lists&lt;/h2&gt;&lt;div&gt;A list is an ordered collection of elements. You can iterate over elements of a list sequentially or refer to the index.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In a sense, a list works a bit like arrays, except their size can be changed dynamically when an array's size is constrained. Moreover, lists provide more advanced behavior than arrays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;img width=&quot;238&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/5402a846-c311-456b-9a60-2e91114d0e0e/&quot; height=&quot;65&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;The List interface&lt;/h2&gt;&lt;div&gt;In Java, the interface &lt;i&gt;List&amp;lt;E&amp;gt;&lt;/i&gt; represents an abstract data type. It extends the interface &lt;i&gt;Collection&amp;lt;E&amp;gt;&lt;/i&gt;.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The most commonly used method of the interface is the following:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;wysiwyg-text-align-left&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;get&lt;/span&gt;&lt;/b&gt;(int index)&lt;/span&gt; returns the element at the specified position in this list&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;int&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-red&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/b&gt; returns the number of elements in this collection&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean &lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;isEmpty&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns &lt;b&gt;true&lt;/b&gt; if this collection contains no elements&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean &lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;contains&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object o)&lt;/span&gt; returns &lt;b&gt;true&lt;/b&gt; if this collection contains the specified element&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean &lt;/span&gt;&lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;add&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E e)&lt;/span&gt;&lt;/span&gt; ensures that this collection contains the specified element&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean &lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;remove&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object o) &lt;/span&gt;removes a single instance of the specified element&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;void &lt;/span&gt;&lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;clear&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; removes all elements from this collection&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;void &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;add&lt;/span&gt;&lt;/b&gt;(int index, E element)&lt;/span&gt; inserts the specified element at the specified position in this list&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;remove&lt;/span&gt;&lt;/b&gt;(int index)&lt;/span&gt; removes the element at the specified position in this list and returns it&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;b&gt; &lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;set&lt;/b&gt;&lt;/span&gt;(int index, E element)&lt;/span&gt; replaces the element at the specified position in this list with the specified element&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;int&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt; indexOf&lt;/b&gt;&lt;/span&gt;(Object o) &lt;/span&gt;returns the index of the first occurrence of the specified element in this list, or -1&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&#10; &lt;p&gt;&#10;  &#10;  &lt;/p&gt;&lt;p&gt;You can't create an instance of the interface List, but you can create an instance of one of its implementations: &lt;i&gt;ArrayList&lt;/i&gt; or &lt;i&gt;LinkedList&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;These implementations have different inner mechanisms, but the common interface List allows you to work with both of them in the same way.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;ArrayList&lt;/h2&gt;&lt;p&gt;It is a resizable-array implementation of the &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;List&lt;/span&gt; interface. Implements all optional list operations, and permits all elements, including &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;null&lt;/span&gt;. In addition to implementing the &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;List&lt;/span&gt; interface, this class provides methods to manipulate the size of the array that is used internally to store the list &lt;br&gt;&lt;/p&gt;&lt;div&gt;&lt;div class=&quot;wysiwyg-text-align-left&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;The constructor of &lt;b&gt;ArrayList&lt;/b&gt; has three overloaded forms:&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;ArrayList()&lt;/b&gt; constructs an empty list with an initial capacity of ten;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;ArrayList(Collection&amp;lt;? extends E&amp;gt; c)&lt;/b&gt; constructs a list containing the elements of the specified collection;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;ArrayList(int initialCapacity)&lt;/b&gt;  constructs an empty list with the specified initial capacity.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here is an example of instantiating a list.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;p&gt;List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); // a list of strings, it has the default size 10&lt;br&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;LinkedList&lt;/h2&gt;&lt;div&gt;Doubly-linked list implementation of the List interface.  &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index&lt;/p&gt;&lt;p&gt;Constructors:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;LinkedList() constructs an empty list;&lt;/li&gt;&lt;li&gt;LinkedList(Collection&amp;lt;? extends E&amp;gt; c) constructs a list containing the elements of the specified collection;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;String&amp;gt; list = new LinkedList&amp;lt;&amp;gt;(); // a list of strings&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Access to the first and the last element of the list is always carried out in constant time because links are permanently stored in the first and the last elements, so adding an item to the end of the list does not mean that you have to iterate the whole list in search of the last element.&lt;/p&gt;&lt;p&gt;In general case, LinkedList in absolute terms loses ArrayList and the memory consumption and the speed of operations.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;An example of List usage&lt;/h2&gt;&lt;p&gt;Here is an example when an instance of ArrayList containing strings is created and processed.&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;java&quot;&gt;&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import java.util.ArrayList;&lt;br&gt;import java.util.List;&#10;&#10;...&#10;&#10;    List&amp;lt;String&amp;gt; nameList = new ArrayList&amp;lt;&amp;gt;(); // create a list of strings&#10;    &#10;    boolean isEmpty = nameList.isEmpty(); // true, it's empty&#10;    int listSize = nameList.size();       // the size is 0&#10;&#10;&#10;    /** &#10;     * Add 4 elements to the collection &#10;     */&lt;/code&gt;&lt;code class=&quot;java&quot;&gt;    nameList.add(&quot;Mr.Green&quot;);&#10;    nameList.add(&quot;Mr.Red&quot;);&#10;    nameList.add(&quot;Mr.Yellow&quot;);&#10;    nameList.add(&quot;Mr.Red&quot;);&#10;    &#10;    isEmpty = nameList.isEmpty(); // false, it's not empty&#10;    listSize = nameList.size();   // the size is 4&#10;&lt;code class=&quot;java&quot;&gt;&lt;br&gt;&lt;/code&gt;    int elementIndex = nameList.indexOf(&quot;Mr.Yellow&quot;));  // elementIndex is 2&#10;    String elementItself = nameList.get(elementIndex)); // elementItself is &quot;Mr.Yellow&quot;&#10;&#10;&#10;    /** &#10;    Replace the item in the specified position&#10;    nameList is [Mr.Green, Mr.Red, Mr.Brown, Mr.Red]&#10;    */&#10;    nameList.set(elementIndex, &quot;Mr.Brown&quot;);&#10;&#10;&#10;    /** &#10;    Delete the item in the specified position&#10;    nameList is [Mr.Green, Mr.Brown, Mr.Red]&#10;    */&#10;    nameList.remove(1);&#10;&#10;    /** &#10;    Clear the entire list&#10;    nameList is []&#10;    */&#10;    nameList.clear();&#10;&#10;...&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Other useful list operations&lt;br&gt;&lt;/h2&gt;&lt;p&gt;1) Iterating over the list using the &quot;for-each&quot; loop&lt;/p&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;for (String name : nameList) {&lt;br&gt;    System.out.println(name);&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;or&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;for (int i = 0; i &amp;lt; nameList.size(); i++) {&lt;br&gt;    System.out.println(nameList.get(i));&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;2) Convert list to array&lt;br&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Object[] objArray = nameList.toArray();&#10;&lt;/code&gt;&#10;or if we need a string array&#10;&#10;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;String[] strArray = nameList.toArray(new String[0]);&#10;&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;div&gt;3) Convert an array to a list&lt;/div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;pre&gt;&lt;code&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;div&gt;&lt;pre&gt;List&amp;lt;String&amp;gt; list = java.util.&lt;b&gt;&lt;/b&gt;Arrays.asList&lt;b&gt;&lt;/b&gt;(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;);&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;pre&gt;4) Sublist&lt;/pre&gt; &lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; numList = new ArrayList&amp;lt;&amp;gt;(Arrays.asList(10,20,30,40,50));&lt;br&gt;&lt;br&gt;System.out.println(numList.subList(1,3)); //[20, 30]&#10;&#10;numList.subList(1,3).clear();&#10;&#10;System.out.println(numList); //[10, 40, 50]&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294424" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;Create ArrayList by name &lt;b&gt;list&lt;/b&gt; in any way known to you and fill it with the following four numbers &lt;span class=&quot;wysiwyg-color-blue&quot;&gt;2, 0, 1, 7&lt;/span&gt;.&lt;/div&gt;&lt;p&gt;The code for displaying the list is already written.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;[2, 0, 1, 7]&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294429" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;&#10;    //write your code here&#10;&#10;&#10;    System.out.println(list);&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;The list of strings is given.&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;String&amp;gt; nameList = new ArrayList&amp;lt;&amp;gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;Output each its element in the loop. Each element must be in new line.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Mr.Green&lt;br&gt;Mr.Yellow&lt;br&gt;Mr.Red&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294431" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;&#10;    List&lt;String&gt; nameList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&#10;&#10;    //write your code here&#10;&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;The list of strings is given.&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;String&amp;gt; nameList = new ArrayList&amp;lt;&amp;gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;b&gt;&lt;/b&gt;Convert it to the string array by name &lt;span class=&quot;wysiwyg-color-red&quot;&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;strArray&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;.&lt;br&gt;&lt;br&gt;The code for displaying the array is already written.&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Mr.Green&lt;br&gt;Mr.Yellow&lt;br&gt;Mr.Red&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294426" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;    List&lt;String&gt; nameList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&#10;&#10;&#10;    //write your code here&#10;&#10;&#10;    for (int i = 0; i &lt; strArray.length; i++) {&#10;      System.out.println(strArray[i]);&#10;    }&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;The list of GreekLetter objects is given.&lt;b&gt;&lt;/b&gt; &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;GreekLetter&amp;gt; letterList = new ArrayList&amp;lt;&amp;gt;();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;b&gt;&lt;/b&gt;Convert it to the object array by name &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;objArray&lt;/b&gt;&lt;/span&gt;.&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt; &lt;/b&gt;The code for displaying the array is already written. &lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;{letter='Gamma', position=3}&lt;br&gt;{letter='Omega', position=24}&lt;br&gt;{letter='Alpha', position=1}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294430" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;    List&lt;GreekLetter&gt; letterList = new ArrayList&lt;&gt;();&#10;    letterList.add(new GreekLetter(&quot;Gamma&quot;,  3));&#10;    letterList.add(new GreekLetter(&quot;Omega&quot;, 24));&#10;    letterList.add(new GreekLetter(&quot;Alpha&quot;,  1));&#10;&#10;&#10;    //write your code here&#10;&#10;&#10;    for (int i = 0; i &lt; objArray.length; i++) {&#10;      System.out.println(objArray[i]);&#10;    }&#10;  }&#10;&#10;  static class GreekLetter {&#10;&#10;    private String letter;&#10;    private Integer position;&#10;&#10;    public GreekLetter(String letter, Integer position) {&#10;      this.letter = letter;&#10;      this.position = position;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;      return &quot;{&quot; +&#10;              &quot;letter='&quot; + letter + '\'' +&#10;              &quot;, position=&quot; + position +&#10;              '}';&#10;    }&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Write a program that reads the list of integer number separated by spaces from the standard input and then remove all numbers with even indexes (0, 2, 4, and so on). After, the program should output the result sequence in the reverse order.&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2 3 4 5 6 7&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;6 4 2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Programming (4)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294432" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287540000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="list1.equals(list2)" />
                          <option value="list3.equals(list2)" />
                          <option value="list1.equals(list3)" />
                          <option value="list1.equals(list1)" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Given three lists:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; list1 = new ArrayList&amp;lt;&amp;gt;();&lt;br&gt;list1.add(1);&lt;br&gt;list1.add(2);&lt;br&gt;list1.add(3);&lt;br&gt;&lt;br&gt;List&amp;lt;Integer&amp;gt; list2 = new LinkedList&amp;lt;&amp;gt;();&lt;br&gt;list2.add(1);&lt;br&gt;list2.add(2);&lt;br&gt;list2.add(3);&lt;br&gt;&lt;br&gt;List&amp;lt;Integer&amp;gt; list3 = new ArrayList&amp;lt;&amp;gt;();&lt;br&gt;list3.add(3);&lt;br&gt;list3.add(1);&lt;br&gt;list3.add(2);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In which cases, the method equals return &lt;b&gt;true&lt;/b&gt;?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294425" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Given a sequence of strings separated by spaces. Read the sequence from the standard input and store all strings to the list. Output the list to the standard output using &lt;code&gt;System.out.println(yourList)&lt;/code&gt;. The order of elements must be the same as in the input.&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Google Oracle JetBrains&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;[Google, Oracle, JetBrains]&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="10" />
                      <option name="name" value="Programming (5)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294427" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286156000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54780" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77929" />
                <option name="index" value="2" />
                <option name="name" value="Queue and Stack" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521291163000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Queue&lt;/h2&gt;&lt;div&gt;The queue is a collection that is inserted and removed according to the first-in-first-out (FIFO) principle.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;img width=&quot;164&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/c3f144b1-e6e7-41a8-874c-aab948e44a1f/&quot; height=&quot;77&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;An excellent example of a queue is a line of students in the food court. New additions to a line made to the back of the queue, while removal (or serving) happens in the front. In the queue, only two operations are allowed &lt;b&gt;enqueue&lt;/b&gt; and &lt;b&gt;dequeue&lt;/b&gt;. Enqueue means to insert an item into the back of the queue, dequeue means removing the front item. In Java, these methods have other names.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;The interface Queue&lt;/h2&gt;&lt;div&gt;This interface extends the interface Collection and adds some new methods:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-red&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean &lt;/span&gt;&lt;b&gt;add&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E e)&lt;/span&gt;&lt;/span&gt; inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning &lt;b&gt;true&lt;/b&gt; upon success and throwing an&lt;b&gt; IllegalStateException&lt;/b&gt; if no space is currently available.&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;offer&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E e)&lt;/span&gt; inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E &lt;b&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;remove&lt;/b&gt;&lt;/span&gt;&lt;b&gt;&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; retrieves and removes the head of this queue; if it's empty, the method throws &lt;b&gt;NoSuchElementException&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;/span&gt; &lt;b&gt;poll&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt;&lt;/span&gt; retrieves and removes the head of this queue, or returns &lt;b&gt;null&lt;/b&gt; if this queue is empty.&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;/span&gt; &lt;b&gt;element&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; retrieves, but does not remove, the head of the queue; if it's empty, the method throws &lt;b&gt;NoSuchElementException&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;peek&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; retrieves, but does not remove, the head of this queue, or returns &lt;b&gt;null&lt;/b&gt; if this queue is empty.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Stack&lt;/h2&gt;&lt;div&gt;The stack is a collection that are inserted and removed according to the last-in-first-out (LIFO) principle. In the pushdown stacks only two operations are allowed: &lt;b&gt;push&lt;/b&gt; the item into the stack, and &lt;b&gt;pop&lt;/b&gt; the item out of the stack. A stack is a limited access data structure - elements can be added and removed from the stack only at the top.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;img width=&quot;76&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/dc8eda3d-400b-48ff-a834-002f1a5b679f/&quot; height=&quot;144&quot;&gt;&lt;br&gt;&lt;p&gt;A helpful analogy is to think of a stack of books; you can remove only the top book, also you can add a new book on the top.&lt;/p&gt;&lt;p&gt;The Standard Class Library has the class Stack, but, according to JavaDoc, a more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Deque&lt;/h2&gt;&lt;p&gt;The java.util.Deque&amp;lt;E&amp;gt; interface extends the interface. java.util.Queue&amp;lt;E&amp;gt;. It represents a queue where you can insert and remove elements from both ends of the queue. Thus, &quot;Deque&quot; is short for &quot;Double-Ended Queue&quot;.&lt;/p&gt;&lt;p&gt;It has methods for working with the first and the last element of a queue:&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/217b76fa-34d5-4e94-b339-66af25ea2205/&quot;&gt;&lt;b&gt;Table of deque methods: some throws an exception and some returns a special value&lt;/b&gt;&lt;/p&gt;&lt;p&gt;There are two implementations of the interface Deque: &lt;i&gt;ArrayDeque&lt;/i&gt; and &lt;i&gt;LinkedList&lt;/i&gt;. So, these classes can work as Queue (FIFO), Stack (LIFO), and Deque (Double-Ended Queue).&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Deque in practice&lt;/h2&gt;&lt;p&gt;It's possible to use implementations of the Deque interface as a queue (FIFO).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Queue&amp;lt;String&amp;gt; q = new ArrayDeque&amp;lt;&amp;gt;();&#10;&#10;q.add(&quot;first&quot;);&#10;q.add(&quot;second&quot;);&#10;q.add(&quot;third&quot;);&#10;&#10;System.out.println(q.peek()); // &quot;first&quot;, it doesn't remove the element&#10;System.out.println(q.peek()); // &quot;first&quot;&#10;System.out.println(q.remove()); // &quot;first&quot;, it removes and returns the head element&#10;&#10;System.out.println(q.peek()); // &quot;second&quot;&#10;System.out.println(q.remove()); // &quot;second&quot;&#10;&#10;System.out.println(q.remove()); // &quot;third&quot;&#10;&#10;System.out.println(q.isEmpty()); // &quot;true&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Also, it's possible to use any implementation of the Deque interface as a stack (LIFO).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Deque&amp;lt;String&amp;gt; stack = new ArrayDeque&amp;lt;&amp;gt;();&#10;&#10;stack.offerLast(&quot;first&quot;);&#10;stack.offerLast(&quot;second&quot;);&#10;stack.offerLast(&quot;third&quot;);&#10;&#10;System.out.println(stack); // [first, second, third]&#10;&#10;System.out.println(stack.pollLast()); // &quot;third&quot;&#10;System.out.println(stack.pollLast()); // &quot;second&quot;&#10;System.out.println(stack.pollLast()); // &quot;first&quot;&#10;&#10;System.out.println(stack.pollLast()); // null&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;The old Stack class&lt;/h2&gt;&lt;p&gt;But sometimes, the class Stack&amp;lt;E&amp;gt; with more a minimalistic API is used. It doesn't implement Deque or Queue interface.&lt;/p&gt;&lt;p&gt;See an example below.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Stack&amp;lt;String&amp;gt; stack = new Stack&amp;lt;&amp;gt;();&#10;&#10;stack.push(&quot;first&quot;);&#10;stack.push(&quot;second&quot;);&#10;stack.push(&quot;third&quot;);&#10;&#10;System.out.println(stack); // [first, second, third]&#10;&#10;System.out.println(stack.pop()); // &quot;third&quot;&#10;System.out.println(stack.pop()); // &quot;second&quot;&#10;System.out.println(stack.pop()); // &quot;first&quot;&#10;&#10;System.out.println(stack.pop()); // throws EmptyStackException&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The method pop() always throws an exception if the stack is empty.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;According to the Java Doc, it's preferable to use implementations of the Deque interface as stacks.&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294411" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286641000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;Create ArrayDeque by name &lt;b&gt;queue&lt;/b&gt; in any way known to you and push the following four numbers &lt;span class=&quot;wysiwyg-color-blue&quot;&gt;2, 0, 1, 7&lt;/span&gt;.&lt;br&gt;&lt;/div&gt;&lt;br&gt;The code for displaying the queue is already written.&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;[2, 0, 1, 7]&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294441" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;&#10;    //write your code here&#10;&#10;&#10;    System.out.println(queue);&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="There is a queue of 4 elements. Put in it one more element - the number &lt;span class=&quot;wysiwyg-color-blue&quot;&gt;5&lt;/span&gt;, and then get 2 items out of the queue.&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;[3, 4, 5]&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294444" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;    Deque&lt;Integer&gt; queue = new ArrayDeque&lt;&gt;(Arrays.asList(1,2,3,4));&#10;&#10;    //write your code here&#10;&#10;&#10;    System.out.println(queue);&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="GermanyFranceNorway" />
                          <option value="GermanyFranceUK" />
                          <option value="UKGermanyFranceNorway" />
                          <option value="GermanyFranceNorwayUK" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;What does this code print?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Deque&amp;lt;String&amp;gt; states = new ArrayDeque&amp;lt;String&amp;gt;();&lt;br&gt;&#10;states.add(&quot;Germany&quot;);&#10;states.add(&quot;France&quot;);&#10;states.push(&quot;UK&quot;);&#10;states.offerLast(&quot;Norway&quot;);&#10;&#10;String sFirst = states.pop();&#10;String s = states.peek();&#10;String sLast = states.peekLast();&lt;br&gt;states.offer(sFirst);&lt;br&gt;String s1 = states.pollLast();&#10;&#10;while (states.peek() != null) {   &#10;    System.out.print(states.pop());&#10;}&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294442" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Write a program that reads the input elements and outputs them in the reverse order.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The first string contains the number of elements. Each line followed the first one contains an element.&lt;/div&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;2&lt;br&gt;1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294447" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Write a program that reads numbers and stores them to a deque. An even number should be added as the first element, an odd number - as the last. After, the program must output all elements from the first to the last.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The first string contains the number of elements. Each line followed the first one contains an element.&lt;/div&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;2&lt;br&gt;1&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294445" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Given a string consisting of brackets, write a program to examine whether the pairs and the orders of &quot;{&quot;, &quot;}&quot;, &quot;(&quot;, &quot;)&quot;, &quot;[&quot;, &quot;]&quot; are correct (balanced). For example, the program should print &lt;code&gt;true&lt;/code&gt; for the string &lt;code&gt;[()]{}{[()()]()}&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;()[]}&lt;/code&gt;.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The classic algorithm for solving this problem relies on using a stack.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;create an instance of a stack;&lt;br&gt;&lt;/li&gt;&lt;li&gt;traverse the input string;&lt;ol&gt;&lt;li&gt;if the current character is a starting bracket &quot;(&quot; or &quot;{&quot; or &quot;{&quot; then push it to the stack;&lt;/li&gt;&lt;li&gt;if the current is a closing bracket &quot;)&quot; or &quot;}&quot; or &quot;]&quot; then remove (pop) the top element from the stack; if the popped bracket is the matching starting bracket then fine else parenthesis are not balanced;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;after completing traversal, if there are some starting brackets left in the stack, then the parenthesis are not balanced.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;([][])&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;true&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Programming (4)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294446" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;Write a program that implements a simple load balancer.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The program must read tasks from the standard input and distribute them between two queues. Tasks will be processed by a system (in future). Each task has a unique identifier and a number indicating the load on the system (in parrots).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The balancer should distribute tasks between queues by the following rule - the task is added to the lower-load queue (by the total load). If both queues have the same total load indicator, the task must be added to the first queue.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It's guaranteed, the input data contain at least two tasks.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The first line contains the number of tasks. Other lines consist of task descriptions - an identifier and a load indicator (separated by a space).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Output data form&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The first line should contain identifiers of tasks in the first queue, the second line - in the second queue.&lt;/div&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;1 1&lt;br&gt;2 1&lt;br&gt;3 1&lt;br&gt;4 3&lt;br&gt;5 1&lt;br&gt;6 1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 3 5 6&lt;br&gt;2 4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Programming (5)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294443" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Write a program simulating a stack that can effectively return the current max element. Your program should read a sequence of commands of different types from the standard input.&lt;br&gt;&lt;/p&gt;&lt;p&gt;There are three types of commands:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;push v&lt;/b&gt; - add an element (v) to a top of the stack;&lt;/li&gt;&lt;li&gt;&lt;b&gt;pop&lt;/b&gt; - remove the top element of the stack;&lt;/li&gt;&lt;li&gt;&lt;b&gt;max&lt;/b&gt; - return the current max in the stack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The time complexity of these operations should not depend on the stack size (&lt;b&gt;&lt;/b&gt;&lt;b&gt;constant time, &lt;/b&gt;&lt;b&gt;O(1)&lt;/b&gt;).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Hint: &lt;/b&gt;you may use several standard stacks to write a solution.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The first line contains the number of commands. Next lines contain one of the following commands:&lt;b&gt; push v, pop, max&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The program must output the current max for each command &lt;b&gt;max&lt;/b&gt;.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;push 2&lt;br&gt;push 1&lt;br&gt;max&lt;br&gt;pop&lt;br&gt;max&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Programming (6)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294448" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286642000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54781" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77930" />
                <option name="index" value="3" />
                <option name="name" value="Set" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521291170000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;What are sets&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&lt;div&gt;A set is a collection that stores unique elements like a mathematical set.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A set is significantly different from an array or a list because it's impossible to get an element by the index.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;img width=&quot;103&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/5f9fed87-caf1-4c84-a43f-cfc4f85b8512/&quot; height=&quot;78&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;The Set interface&lt;/h2&gt;&lt;div&gt;The interface Set&amp;lt;E&amp;gt; is a subtype of the java.util.Collection interface. The set inherits all method from the interface Collection but doesn't add any new methods.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;int&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-red&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/b&gt; returns the number of elements in this collection&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;isEmpty&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns &lt;b&gt;true&lt;/b&gt; if this collection contains no elements&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;contains&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object o)&lt;/span&gt; returns &lt;b&gt;true&lt;/b&gt; if this collection contains the specified element&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean &lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;add&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E e)&lt;/span&gt;&lt;/span&gt; ensures that this collection contains the specified element&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;remove&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object o)&lt;/span&gt; removes a single instance of the specified element&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;void &lt;/span&gt;&lt;b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;clear&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; Removes all elements from this collection&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Since Set is an interface you need to instantiate a concrete implementation of the interface in order to use it. There are three general-purpose set implementations: &lt;i&gt;HashSet&lt;/i&gt;, &lt;i&gt;LinkedHashSet&lt;/i&gt;, &lt;i&gt;TreeSet&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Each of these implementations behaves a little differently with respect to the order of the elements when iterating, and the time it takes to insert and access elements in the sets.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, there is a special-purpose implementation &lt;i&gt;EnumSet.&lt;/i&gt; It's a high-performance Set implementation for enum types.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;HashSet&lt;/b&gt;&lt;/p&gt;&lt;p&gt;This class implements the &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;Set&lt;/span&gt; interface, backed by a hash table. It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.&lt;/p&gt;&lt;p&gt;This class offers constant time performance for the basic operations (&lt;span class=&quot;wysiwyg-font-tt&quot;&gt;add&lt;/span&gt;, &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;remove&lt;/span&gt;, &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;contains&lt;/span&gt; and &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;size&lt;/span&gt;), assuming the hash function disperses the elements properly among the buckets.&lt;/p&gt;&lt;p&gt;See the following example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;Integer&amp;gt; set1 = new HashSet&amp;lt;&amp;gt;();&#10;set1.add(0);&#10;set1.add(1);&#10;set1.add(2);&#10;&#10;Set&amp;lt;Integer&amp;gt; set2 = new HashSet&amp;lt;&amp;gt;();&#10;set2.add(3);&#10;set2.add(2);&#10;set2.add(4);&#10;set2.add(1);&#10;&#10;Set&amp;lt;Integer&amp;gt; resultSet = new HashSet&amp;lt;&amp;gt;();&#10;resultSet.addAll(set1); // union empty set and [0, 1, 2]&#10;resultSet.addAll(set2); // union [0, 1, 2] and [3, 2, 4, 1]&#10;&#10;System.out.println(resultSet); // contains only unique elements from both sets [0, 1, 2, 3, 4]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Remember, this set implementation is unordered.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;TreeSet&lt;br&gt;&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;The class TreeSet guarantees the order of the elements when iterated. The order is corresponding to the sorting order of the elements determined either by their natural order (if they implement the Comparable interface) or by specific Comparator implementation.&lt;/p&gt;&lt;p&gt;In other words, the order in which the elements would be sorted if you used a sort algorithm on a List or Array containing these elements.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This class implements the SortedSet interface that extends the base Set interface. The SortedSet interface provides some new operations:&lt;/p&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Comparator&amp;lt;? super E&amp;gt;&lt;/span&gt; &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;comparator&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the comparator used to order elements in the set or null if the set uses the natural ordering of its elements&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;first&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the first (lowest) element in the set&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;/span&gt; &lt;b&gt;last&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the last (highest) element in the set&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;SortedSet&amp;lt;E&amp;gt;&lt;/span&gt; &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;headSet&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;toElement&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;)&lt;/span&gt; returns a subset containing elements that are strictly less than toElement&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;SortedSet&amp;lt;E&amp;gt;&lt;/span&gt; &lt;b&gt;tailSet&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;fromElement&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;)&lt;/span&gt; returns a subset containing elements that are greater than or equal to fromElement&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;SortedSet&amp;lt;E&amp;gt;&lt;/span&gt; &lt;b&gt;subSet&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(E &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;fromElement&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;, E &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;toElement&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;)&lt;/span&gt; returns a subset containing elements in range fromElement (inclusive) toElement (exclusive)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;See an example of using this set implementation.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SortedSet&amp;lt;Integer&amp;gt; sortedSet = new TreeSet&amp;lt;&amp;gt;();&#10;sortedSet.add(10);&#10;sortedSet.add(15);&#10;sortedSet.add(13);&#10;sortedSet.add(21);&#10;sortedSet.add(17);&#10;&#10;System.out.println(sortedSet); // [10, 13, 15, 17, 21]&#10;&#10;SortedSet&amp;lt;Integer&amp;gt; subSetLessThan16 = sortedSet.headSet(16); // [10, 13, 15]&#10;&#10;int maxElement = sortedSet.last(); // it is 21&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Note, HashSet is much faster than TreeSet (constant-time versus log-time for most operations) but offers no ordering guarantees. If you need to use the operations in the SortedSet interface, or if value-ordered iteration is required, use TreeSet, otherwise - HashSet.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;LinkedHashSet&lt;/h2&gt;&lt;p&gt;This class implements the &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;Set&lt;/span&gt; interface. But It differs from HashSet by guaranteeing that the order of the elements during iteration is the same as the order they were inserted. Reinserting an element that is already in the LinkedHashSet does not change this order.&lt;/p&gt;&lt;p&gt;LinkedHashSet is in some sense intermediate between HashSet and TreeSet. Implemented as a hash table with a linked list running through it, it provides &lt;em&gt;insertion-ordered&lt;/em&gt; iteration (least recently inserted to most recently) and runs nearly as fast as HashSet. The LinkedHashSet implementation spares its clients from the unspecified, generally chaotic ordering provided by HashSet without incurring the increased cost associated with TreeSet.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Here is an example&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;Character&amp;gt; orderedSet = new LinkedHashSet&amp;lt;&amp;gt;();&lt;br&gt;&lt;br&gt;for (char c = 'a'; c &amp;lt;= 'k'; c++) {&lt;br&gt;    orderedSet.add(c);&lt;br&gt;}&lt;br&gt;        &lt;br&gt;System.out.println(orderedSet); // the order is always [a, b, c, d, e, f, g, h, i, j, k]&lt;/code&gt;&lt;/pre&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Remember, this set implementation is ordered.&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294412" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286964000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Create TreeSet by name &lt;b&gt;set&lt;/b&gt; in any way known to you and fill it with the following three strings &lt;span class=&quot;wysiwyg-color-blue&quot;&gt;&quot;Gamma&quot;, &lt;span class=&quot;wysiwyg-color-blue&quot;&gt;&quot;Alpha&quot;&lt;/span&gt;, &quot;Omega&quot;&lt;/span&gt; .&lt;br&gt;&lt;/p&gt;&lt;p&gt;The code for displaying the set is already written.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;[Alpha, Gamma, Omega]&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294459" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;&#10;    //write your code here&#10;&#10;&#10;    System.out.println(set);&#10;&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286965000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;The set of strings is given.&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;String&amp;gt; nameSet = new TreeSet&amp;lt;&amp;gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;Output each its element in the loop with a new line.&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Mr.Green&lt;br&gt;Mr.Red&lt;br&gt;Mr.Yellow&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294454" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;&#10;    Set&lt;String&gt; nameSet = new TreeSet&lt;&gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&#10;&#10;    //write your code here&#10;&#10;&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286965000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="a" />
                          <option value="b" />
                          <option value="c" />
                          <option value="d" />
                          <option value="e" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Given two sets &lt;b&gt;set1 &lt;/b&gt;and &lt;b&gt;set2&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;Select all cases when the following statement returns &lt;b&gt;true&lt;/b&gt;.&lt;/div&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;set1.equals(set2);&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cases:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;a)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;Integer&amp;gt; set1 = new HashSet&amp;lt;&amp;gt;();&lt;br&gt;set1.add(1);&lt;br&gt;set1.add(2);&lt;br&gt;set1.add(3);&lt;br&gt;&lt;br&gt;Set&amp;lt;Integer&amp;gt; set2 = new HashSet&amp;lt;&amp;gt;();&lt;br&gt;set2.add(1);&lt;br&gt;set2.add(2);&lt;br&gt;set2.add(3);&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;b)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;Integer&amp;gt; set1 = new HashSet&amp;lt;&amp;gt;();&lt;br&gt;set1.add(1);&lt;br&gt;set1.add(2);&lt;br&gt;set1.add(3);&lt;br&gt;&lt;br&gt;Set&amp;lt;Integer&amp;gt; set2 = new HashSet&amp;lt;&amp;gt;();&lt;br&gt;set2.add(3);&lt;br&gt;set2.add(2);&lt;br&gt;set2.add(1);&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;c)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;Integer&amp;gt; set1 = new HashSet&amp;lt;&amp;gt;();&lt;br&gt;set1.add(1);&lt;br&gt;set1.add(2);&lt;br&gt;set1.add(3);&lt;br&gt;&lt;br&gt;Set&amp;lt;Integer&amp;gt; set2 = new LinkedHashSet&amp;lt;&amp;gt;();&lt;br&gt;set2.add(1);&lt;br&gt;set2.add(3);&lt;br&gt;set2.add(2);&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;d)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;Integer&amp;gt; set1 = new LinkedHashSet&amp;lt;&amp;gt;();&lt;br&gt;set1.add(1);&lt;br&gt;set1.add(3);&lt;br&gt;set1.add(2);&lt;br&gt;&lt;br&gt;Set&amp;lt;Integer&amp;gt; set2 = new LinkedHashSet&amp;lt;&amp;gt;();&lt;br&gt;set2.add(1);&lt;br&gt;set2.add(3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;e)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SortedSet&amp;lt;Integer&amp;gt; set1 = new TreeSet&amp;lt;&amp;gt;();&lt;br&gt;set1.add(1);&lt;br&gt;set1.add(3);&lt;br&gt;&lt;br&gt;Set&amp;lt;Integer&amp;gt; set2 = new LinkedHashSet&amp;lt;&amp;gt;();&lt;br&gt;set2.add(3);&lt;br&gt;set2.add(1);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294458" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286965000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="LinkedSet" />
                          <option value="EnumSet" />
                          <option value="HashSet" />
                          <option value="LinkedHashSet" />
                          <option value="MapSet" />
                          <option value="TreeSet" />
                          <option value="SortedSet" />
                          <option value="GraphSet" />
                          <option value="ArraySet" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Select all existing implementations of the &lt;b&gt;Set&lt;/b&gt; interface from the standard class library. &lt;/p&gt;&lt;p&gt;You should select &lt;b&gt;only concrete classes&lt;/b&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294455" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286965000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value=" It's possible to get an element by its index from a set" />
                          <option value=" A set has the method size" />
                          <option value=" A set can store only unique elements" />
                          <option value=" The standard library provides only unordered sets" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all correct statements about standard sets in Java." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294456" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286965000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Write a program that reads a sequence of strings from the standard input and displays them in a lexicographic order without duplicates.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Try to write your solution using a set.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The first line contains the size of a string sequence. Next lines contain strings.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A sorted sequence of strings without duplicates. Each string must be in a new line.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;postgres&lt;br&gt;sqlite&lt;br&gt;oracle&lt;br&gt;mongodb&lt;br&gt;postgres&lt;br&gt;mssql&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;mongodb&lt;br&gt;mssql&lt;br&gt;oracle&lt;br&gt;postgres&lt;br&gt;sqlite&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294457" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521286965000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54782" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77931" />
                <option name="index" value="4" />
                <option name="name" value="Map" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521291175000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;What are maps&lt;br&gt;&lt;/h2&gt;&lt;div&gt;&lt;b&gt;Map&lt;/b&gt; is a collection that stores key-value pairs. A map can't contain duplicate keys, but values can repeat.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;img width=&quot;160&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/cc075b38-978c-454a-a6d9-d5515c5893ba/&quot; height=&quot;163&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;In a sense, a map can be considered as &quot;extended&quot; array because the key is similar to index but it can be of any type, including integer numbers, strings and so on.&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Important, you need a correct implementation of equals and hashcode if you'd like use objects of your custom class as a map keys.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;The Map interface&lt;/h2&gt;&lt;div&gt;The interface Map&amp;lt;K, V&amp;gt; is a generic type, where K is the type of &lt;span class=&quot;wysiwyg-color-red&quot;&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;keys&lt;/span&gt; &lt;/span&gt;and V is the type of stored &lt;span class=&quot;wysiwyg-color-black&quot;&gt;values. &lt;/span&gt;The interface is not a subtype of the Collection interface, but maps are often considered as collections.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A map cannot contain duplicate keys; each key can map to at most one value (even, a collection of values).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The interface declares a lot of methods, here are some of them:&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;int&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;size&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the number of elements in this collection&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;isEmpty&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; Returns &lt;b&gt;true&lt;/b&gt; if this collection contains no elements&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;containsKey&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object key)&lt;/span&gt;  Returns &lt;b&gt;true&lt;/b&gt; if this collection contains the specified key&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;containsValue&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object value)&lt;/span&gt; Returns &lt;b&gt;true&lt;/b&gt; if this collection contains the specified value&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;get&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object key)&lt;/span&gt; returns the value to which the specified key is mapped, or &lt;b&gt;null&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;put&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(K key, V value) &lt;/span&gt;associates the specified value with the specified key&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;remove&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object key)&lt;/span&gt; removes the mapping for a key from this map&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;void&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;clear&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; removes all elements from this collection&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Set&amp;lt;K&lt;/span&gt;&amp;gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;keySet&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns a Set view of the keys contained in this map&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collection&amp;lt;V&amp;gt;&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;values&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;() &lt;/span&gt;returns a Collection view of the values contained in this map&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Set&amp;lt;Map.Entry&amp;lt;K, V&amp;gt;&amp;gt;&lt;/span&gt; &lt;b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;entrySet&lt;/span&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns a Set view of the pairs contained in this map&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;b&gt;putIfAbsent&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(K key, V value)&lt;/span&gt; - if the specified key is not already associated with a value (or is mapped to &lt;b&gt;null&lt;/b&gt;) associates it with the given value and return &lt;b&gt;null&lt;/b&gt;, otherwise - returns the current value&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;getOrDefault&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(Object key, V &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;)&lt;/span&gt; returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The Standard Class Library provides a lot of the interface implementations. We will consider only the most commonly used implementations: &lt;i&gt;HashMap&lt;/i&gt;, &lt;i&gt;TreeMap&lt;/i&gt; and &lt;i&gt;LinkedHashMap&lt;/i&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;HashMap&lt;br&gt;&lt;/h2&gt;&lt;div&gt;The HashMap implements the base Map interfaces. It does not guarantee any order of the elements stored internally in the map.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This implementation provides constant-time performance for the basic operations (&lt;span class=&quot;wysiwyg-font-tt&quot;&gt;get&lt;/span&gt; and &lt;span class=&quot;wysiwyg-font-tt&quot;&gt;put&lt;/span&gt;), assuming the hash function disperses the elements properly among the buckets.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Map&amp;lt;Integer, String&amp;gt; products = new HashMap&amp;lt;&amp;gt;(); // unordered map of products&#10;&#10;products.put(1000, &quot;Notebook&quot;);&#10;products.put(2000, &quot;Phone&quot;);&#10;products.put(3000, &quot;Keyboard&quot;);&#10;&#10;System.out.println(products); // {2000=Phone, 1000=Notebook, 3000=Keyboard}&#10;&#10;String notebook = products.get(1000); // &quot;Notebook&quot;&#10;String noSuchProduct = products.get(4000); // it's null&#10;&#10;// iterating over pairs of the map&#10;for (Map.Entry&amp;lt;Integer, String&amp;gt; product : products.entrySet()) {&#10;    System.out.println(product.getKey() + &quot;: &quot; + product.getValue());&#10;}&#10;        &#10;// iterating over values of the map&#10;for (String productName : products.values()) {&#10;    System.out.println(productName);&#10;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;Remember, this implementation is unordered.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;LinkedHashMap&lt;/h2&gt;&lt;div&gt;It extends HashMap class. It creates a linked list of elements in the map, located in the order in which they were inserted.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's see a part of the previous example again:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Map&amp;lt;Integer, String&amp;gt; products = new LinkedHashMap&amp;lt;&amp;gt;(); // ordered map of products&#10;&#10;products.put(1000, &quot;Notebook&quot;);&#10;products.put(2000, &quot;Phone&quot;);&#10;products.put(3000, &quot;Keyboard&quot;);&#10;&#10;System.out.println(products); // it's always ordered {1000=Notebook, 2000=Phone, 3000=Keyboard}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Remember, this map implementation is ordered.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;TreeMap&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The class TreeMap guarantees the order of the elements when iterated. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This class implements the SortedMap interface that extends the base Map interface. The SortedMap interface provides some new methods:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Comparator&amp;lt;? super K&amp;gt;&lt;/span&gt; &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;comparator&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the comparator used to order elements in the set or null if the map uses the natural ordering of its elements&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;firstKey&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the first (lowest) key in the map&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;/span&gt; &lt;b&gt;lastKey&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns the last (highest) key in the map&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;SortedMap&amp;lt;K, V&amp;gt;&lt;/span&gt; &lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;headMap&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(K &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;toKey&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;)&lt;/span&gt; returns a submap containing elements whose keys are strictly less than toKey&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;SortedMap&amp;lt;K, V&amp;gt;&lt;/span&gt; &lt;b&gt;tailMap&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(K fromKey&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;)&lt;/span&gt; returns a submap containing elements whose keys are greater than or equal to fromKey&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;SortedMap&amp;lt;K, V&amp;gt;&lt;/span&gt; &lt;b&gt;subMap&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;(K &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;fromKey&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;, E &lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;toKey&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;)&lt;/span&gt; returns a submap containing elements whose keys in range fromKey (inclusive) toKey (exclusive)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the following example, an instance of TreeMap is created and filled with events. Each event has a date (key) and title (value).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SortedMap&amp;lt;LocalDate, String&amp;gt; events = new TreeMap&amp;lt;&amp;gt;();&lt;br&gt;&lt;br&gt;events.put(LocalDate.of(2017, 6, 6), &quot;The Java Conference&quot;);&lt;br&gt;events.put(LocalDate.of(2017, 6, 7), &quot;Another Java Conference&quot;);&lt;br&gt;events.put(LocalDate.of(2017, 6, 8), &quot;Discussion: career or education?&quot;);&lt;br&gt;events.put(LocalDate.of(2017, 6, 9), &quot;The modern art&quot;);&lt;br&gt;events.put(LocalDate.of(2017, 6, 10), &quot;Coffee master class&quot;);&lt;br&gt;&lt;br&gt;LocalDate fromInclusive = LocalDate.of(2017, 6, 8);&lt;br&gt;LocalDate toExclusive = LocalDate.of(2017, 6, 10);&lt;br&gt;&#10;System.out.println(events.subMap(fromInclusive, toExclusive));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note, &lt;i&gt;LocalDate.of(year, month, day)&lt;/i&gt; creates the specified date object with the given year, month and day.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The code outputs the resulting submap:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;{2017-06-08=Discussion: career or education?, 2017-06-09=The modern art}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294413" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287232000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;Create &lt;b&gt;TreeMap&lt;/b&gt; by name &lt;b&gt;map&lt;/b&gt; in any way known to you and fill it with the following three key - value pairs:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;wysiwyg-color-blue&quot;&gt;Omega - 24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;wysiwyg-color-blue&quot;&gt;Alpha - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;wysiwyg-color-blue&quot;&gt;Gamma - 3&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;where strings - keys and numbers - values.&lt;br&gt;&lt;br&gt;The code for displaying the map is already written.&lt;/div&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;{Alpha=1, Gamma=3, Omega=24}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294467" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;    //write your code here&#10;&#10;&#10;&#10;    System.out.println(map);&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287232000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;The map is given. Output each its key-value pair in the loop with a new line.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Each line must be in form of &lt;b&gt;key=value&lt;/b&gt; (for example, Gamma=3)&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Alpha=1&lt;br&gt;Gamma=3&lt;br&gt;Omega=24&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294468" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="::code&#10;import java.util.*;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;&#10;    Map&lt;String, Integer&gt; map = new TreeMap&lt;&gt;();&#10;    map.put(&quot;Gamma&quot;,  3);&#10;    map.put(&quot;Omega&quot;, 24);&#10;    map.put(&quot;Alpha&quot;,  1);&#10;&#10;&#10;    //write your code here&#10;&#10;&#10;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287232000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;When Anthony read &quot;War and Peace&quot;, he wondered how many words and how much of them were used in this book.&lt;br&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Help Anthony to write a simplified version of a program that can count the words, separated by a space and output the resulting statistics.&lt;/p&gt;&#10;&#10;&lt;p&gt;The program must read one line from the standard input and for each unique word in this line output the count of its repeated occurrence (&lt;b&gt;case insensitive&lt;/b&gt;) in the &quot;word amount&quot; format (see the output example).&lt;/p&gt;&#10;&lt;p&gt;The order of words output may be arbitrary. Each unique word must appear in the output only once.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;a aa abC aa ac abc bcd a&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;a 2&lt;br&gt;aa 2&lt;br&gt;abc 2&lt;br&gt;ac 1&lt;br&gt;bcd 1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294465" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287232000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;The simplest spell checker is based on a list of known words.&#10;Every word in the checked text is searched for in this list and, if such a word&#10;was not found, it is marked as erroneous.&lt;br&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Write this spell checker.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first line of the input contains $d$ – number of records in&#10;the list of known word. Next go $d$ lines contain one known word per line, next&#10;— the number $l$ of lines of the text, after which — $l$ lines of the text.&lt;/p&gt;&#10;&#10;&lt;p&gt;Write a program that outputs those words from the text, which are&#10;not found in the dictionary (i.e. erroneous). Your shell checker should be case&#10;insensitive. The words are entered in an arbitrary order. Words, which are not&#10;found in the dictionary, should not be duplicated in the output.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;a&lt;br&gt;bb&lt;br&gt;cCc&lt;br&gt;2&lt;br&gt;a bb aab aba ccc&lt;br&gt;c bb aaa&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;aaa&lt;br&gt;aab&lt;br&gt;c&lt;br&gt;aba&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294469" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287232000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;span&gt;At some point in the Bioinformatics &lt;/span&gt;Institute&lt;span&gt;, biology students no longer understood what did the computer science students said: they spoke a strange set of sounds.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;And one of the biologists had suddenly discovered the secret of computer science students: they used the &lt;a rel=&quot;nofollow&quot; href=&quot;https://en.wikipedia.org/wiki/Substitution_cipher&quot;&gt;substitution cipher&lt;/a&gt; in their communication, i.e. they replaced each symbol of the initial message to the corresponding another symbol. Biologists gained the key to the cipher and now they need help:&lt;/p&gt;&#10;&#10;&lt;p&gt;Write a program that can encode and decode the substitution cipher. The program accepts two input strings of the same length; the first line contains the characters of the original alphabet, the second line - the symbols of a resulting alphabet, then goes a line you need to encode by the transmitted key, and another line to be decrypted.&lt;/p&gt;&#10;&#10;&lt;p&gt;For example, the program takes the following input:&lt;br&gt;&#10;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;no-highlight&quot;&gt;abcd&#10;*d%#&#10;abacabadaba&#10;#*%*d*%&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;It means that symbol &lt;b&gt;a&lt;/b&gt; of the initial message is changed to symbol &lt;b&gt;*&lt;/b&gt; in the cipher, &lt;b&gt;b&lt;/b&gt; changed to &lt;b&gt;d&lt;/b&gt;, &lt;b&gt;c&lt;/b&gt; — to&lt;b&gt;%&lt;/b&gt; and &lt;b&gt;d&lt;/b&gt; — to &lt;b&gt;#&lt;/b&gt;. You need to encode the string &lt;b&gt;abacabadaba&lt;/b&gt; and decode the string &lt;b&gt;#*%*d*%&lt;/b&gt; using this cipher. So you get the following lines, which you should be the output of the program:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;no-highlight&quot;&gt;*d*%*d*#*d*&#10;dacabac&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;abcd&lt;br&gt;*d%#&lt;br&gt;abacabadaba&lt;br&gt;#*%*d*%&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;*d*%*d*#*d*&lt;br&gt;dacabac&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Programming (4)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294466" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287232000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div&gt;Write a program that reads key-value pairs and outputs pairs whose keys belongs to the specified range (inclusive) in the ascending order by the key.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The first line contains two values - range borders. The second line contains the number of key-value pairs. Next lines contain pair (an integer key and a string value separated by a space).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All pairs whose keys belong to the range. Each pair in a new line. The key and the value of a pair must be separated by a space.&lt;/div&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2 4&lt;br&gt;5&lt;br&gt;1 aa&lt;br&gt;5 ee&lt;br&gt;2 bb&lt;br&gt;4 dd&lt;br&gt;3 cc&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2 bb&lt;br&gt;3 cc&lt;br&gt;4 dd&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Programming (5)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294464" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287232000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54783" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77932" />
                <option name="index" value="5" />
                <option name="name" value="Iterator" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521291181000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Iterable&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;div&gt;The interface &lt;b&gt;Collection&lt;/b&gt; extends the interface &lt;b&gt;Iterable&lt;/b&gt;. Implementing this interface allows an object to be the target of the &lt;b&gt;for-each&lt;/b&gt; loop. The order of elements when iterating is specific to a concrete collection.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Collection&amp;lt;String&amp;gt; strings = Arrays.asList(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;);&#10;        &#10;// iterating over collection using the &quot;for-each&quot; loop&#10;for (String elem : strings) {&#10;    System.out.println(elem);&#10;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;Since Java 8 the interface &lt;i&gt;Iterable&lt;/i&gt; has three methods (before, only one). One of them is&lt;b&gt; &lt;/b&gt;&lt;i&gt;iterator()&lt;/i&gt;&lt;b&gt;&lt;i&gt; &lt;/i&gt;&lt;/b&gt;returning &lt;b&gt;&lt;/b&gt;&lt;i&gt;Iterator&amp;lt;T&amp;gt;. &lt;/i&gt;All collections that inherit the &lt;b&gt;Collection&lt;/b&gt; interface has this method (Maps doesn't have this method).&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Iterator&lt;/h2&gt;&lt;div&gt;The iterator is a universal mechanism for iterating over collections regardless of their structure. It's possible to remove elements from the underlying collection during the iteration.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Some methods of the &lt;b&gt;Iterator&amp;lt;E&amp;gt;&lt;/b&gt; interface:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;boolean&lt;/span&gt;&lt;b&gt; &lt;/b&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;hasNext&lt;/b&gt;&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; returns &lt;b&gt;true&lt;/b&gt; if the iteration has more elements, otherwise - &lt;b&gt;false&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;E&lt;/span&gt;&lt;b&gt; next&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt;&lt;b&gt;&lt;/b&gt; returns the next element in the iteration&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;void&lt;/span&gt; &lt;b&gt;remove&lt;/b&gt;&lt;span class=&quot;wysiwyg-color-purple&quot;&gt;()&lt;/span&gt; removes from the collection the last element returned by this iterator&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The typical usage of the iterator includes three steps:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;check the collection has next element&lt;/li&gt;&lt;li&gt;obtain the next element&lt;/li&gt;&lt;li&gt;processing the obtained element&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example, let's remove all elements less than 10 from a set.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Set&amp;lt;Long&amp;gt; set = new TreeSet&amp;lt;&amp;gt;(); // sorted set&#10;set.add(10L);&#10;set.add(5L);&#10;set.add(18L);&#10;set.add(14L);&#10;set.add(9L);&#10;&#10;System.out.println(set); // [5, 9, 10, 14, 18]&#10;&#10;Iterator&amp;lt;Long&amp;gt; iter = set.iterator();&#10;while (iter.hasNext()) {&#10;    Long current = iter.next();&#10;    if (current &amp;lt; 10) {&#10;        iter.remove();&lt;br&gt;    }&#10;}&#10;&#10;System.out.println(set); // [10, 14, 18]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The iterator allows you to remove elements from the collection but you can't do it inside the &quot;for-each&quot; loop.&lt;/p&gt;&lt;p&gt;Important, an iterator iterates over a collection in order depending on the order of elements of the collection. In the example above, the iterator gets elements according to sorting order (because of TreeSet).&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;ListIterator&lt;/h2&gt;&lt;p&gt;It's an iterator only for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list. This iterator has no current element; its cursor position always lies between the element that would be returned by a call to &lt;i&gt;previous()&lt;/i&gt; and the element that would be returned by a call to &lt;i&gt;next()&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Here is an example.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ListIterator&amp;lt;Integer&amp;gt; listIterator = list.listIterator(); // &lt;b&gt;&lt;/b&gt;only for lists!&lt;b&gt;&lt;/b&gt;&#10;&lt;pre&gt;while (listIterator.hasPrevious()){&lt;br&gt;    System.out.println(listIterator.previous() +&quot; on &quot;+ listIterator.previousIndex());&lt;br&gt;}&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294414" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287301000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="ArrayIterator" />
                          <option value="Terminator" />
                          <option value="ListIterator" />
                          <option value="CollectionIterator" />
                          <option value="Iterator" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select existing iterators." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294472" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287364000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54784" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77938" />
                <option name="index" value="6" />
                <option name="name" value="Collections utility class" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521291187000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Polymorphic utility methods&lt;/h2&gt;&lt;div&gt;&lt;i&gt;&lt;b&gt;The Java Collections Framework&lt;/b&gt; &lt;/i&gt;includes the utility class &lt;b&gt;Collections&lt;/b&gt;&lt;i&gt;&lt;b&gt;&lt;/b&gt;&lt;/i&gt; containing a lot of static methods for creating and processing collections. Do not confuse this class and the&lt;b&gt; Collection&lt;/b&gt; interface. They are completely different things.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The class &lt;b&gt;Collections&lt;/b&gt; contains polymorphic algorithms that operate on collections.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's see some groups of these methods:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;creating empty collections: &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;b&gt;emptyList()&lt;/b&gt;, &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;b&gt;emptyMap()&lt;/b&gt;, &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections&lt;/span&gt;.&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;emptySet()&lt;/b&gt;&lt;/span&gt; and so on;&lt;/li&gt;&lt;li&gt;creating colections with a single element: &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections&lt;/span&gt;.&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;singletonList(T o)&lt;/b&gt;&lt;/span&gt;, &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;b&gt;singletonMap(K key, V val)&lt;/b&gt;, etc;&lt;b&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;sorting, shuffling and reversing lists: &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;&lt;b&gt;sort(List&amp;lt;T&amp;gt; list)&lt;/b&gt;, &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;b&gt;shuffle(List&amp;lt;?&amp;gt; list)&lt;/b&gt;, &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;b&gt;reverse(List&amp;lt;?&amp;gt; list)&lt;/b&gt;;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;check the two collections do not contain common elements: &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;b&gt;disjoint(Collection&amp;lt;?&amp;gt; c1, Collection&amp;lt;?&amp;gt; c2)&lt;/b&gt;;&lt;br&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;wysiwyg-color-black&quot;&gt;counting the number of elements equal to the specified object: &lt;span class=&quot;wysiwyg-color-purple&quot;&gt;Collections.&lt;/span&gt;&lt;b&gt;frequency(Collection&amp;lt;?&amp;gt; c, Object o)&lt;/b&gt;; &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note, the listed methods have overloaded versions.&lt;/p&gt;&lt;p&gt;Of course, it's not all methods here. The class also contains methods for finding max and min values in collections, replacing elements, copying collections, creating an unmodifiable view of collections and so on.&lt;/p&gt;&lt;p&gt;See the full list of methods here: &lt;a rel=&quot;nofollow&quot; href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;List processing example&lt;/h2&gt;&lt;p&gt;Let's assume we have the collection&lt;b&gt; list&lt;/b&gt; containing elements [1, 2, 3, 2, 3, 4].&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;int countInList = Collections.frequency(list, 3); // the count is 2&#10;&lt;br&gt;Collections.sort(list); // [1, 2, 3, 2, 3, 4] -&amp;gt; [1, 2, 2, 3, 3, 4]&#10;&#10;Collections.reverse(list); // [4, 3, 3, 2, 2, 1]&#10;&#10;Collections.addAll(list, 5, 6, 7); // the list is [4, 3, 3, 2, 2, 1, 5, 6, 7]&#10;&#10;int max = Collections.max(list); // the max is 7&#10;&#10;// It's impossible to change the unmodifiable list&#10;List&amp;lt;Integer&amp;gt; unmodifiableList = Collections.unmodifiableList(list);&#10;&#10;Collections.shuffle(unmodifiableList); // it throws UnsupportedOperationException&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Methods for creating empty and singleton collections also returns unmodifiable collections.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Here is an interesting example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; singletonList = Collections.singletonList(10);&#10;&#10;Collections.sort(singletonList); // it doesn't throw an exception&#10;&#10;Collections.shuffle(singletonList); // it doesn't throw an exception&lt;br&gt;        &#10;Collections.addAll(singletonList, 1, 2); // it throws the UnsupportedOperationException&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;This example is easy to understand, the sorting and shuffling a list containing one element doesn't require its modification.&lt;br&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Conclusion&lt;/h2&gt;&lt;p&gt;If you have a task related to processing collections before you start writing your code look at the possible solution here.&lt;/p&gt;&lt;p&gt;Many methods of the Collections class allows you to process other collections, not only lists.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt; &lt;/p&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294420" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287504000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Write a program to sequentially swap elements by their indexes in a given list. Indexes of the elements start with 0 and always less than the size of the list.&lt;/p&gt;&lt;p&gt;Try to use standard methods for processing collections.&lt;br&gt;&lt;br&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The first line contains elements of the list. The second line contains the number of swaps. Then follows the lines with descriptions of the swaps. Each line contains two numbers - indexes of swapped elements.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;All elements of the modified list separated by spaces must be output in one line.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2 3 4 5 6&lt;br&gt;2&lt;br&gt;0 1&lt;br&gt;3 4&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2 1 3 5 4 6&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294490" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287504000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Collections.min(list);" />
                          <option value="Collections.addAll(numbers, 2, 3);" />
                          <option value="Collections.unmodifiableCollection(numbers)" />
                          <option value="Collections.sort(list);" />
                          <option value="Collections.replaceAll(numbers, 4, 5);" />
                          <option value="Collections.frequency(list, 10);" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have a list containing integer numbers:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; numbers = ...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The list can be empty or filled, modifiable or unmodifiable. It's unknown.&lt;/p&gt;&lt;p&gt;Which operations should not throw any exceptions?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294491" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287504000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Given a table of integer numbers. You should rotate rows of the table by the specified distance.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Try to use collections and standard methods for them.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The first line contains two numbers: a number of rows and a number of columns of the table.&lt;/p&gt;&lt;p&gt;The following lines describe rows of the table. In each row, all elements are separated by spaces.&lt;/p&gt;&lt;p&gt;The last line consists of one number - the distance for rotating.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Output the resulting table. Separate numbers by a single space in the output.&lt;/p&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;3 3&lt;br&gt;1 1 1&lt;br&gt;2 2 2&lt;br&gt;3 3 3&lt;br&gt;1&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3 3 3&lt;br&gt;1 1 1&lt;br&gt;2 2 2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294489" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;  public static void main(String[] args) {&#10;    //put your code here&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521287504000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54790" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
    </StudyTaskManager>
  </component>
</project>